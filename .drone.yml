---
kind: pipeline
name: update repository

steps:
  - name: submodules
    image: docker:git
    commands:
      - git submodule update --init --recursive

  - name: update
    image: python:3.6
    commands:
      - pip install -r requirements.txt
      - python update_repository.py --verbose

---
kind: pipeline
name: openssl 0.9.7 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7a TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7a
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7a/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7a/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7a
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7b TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7b
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7b/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7b/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7b
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7c TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7c
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7c/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7c/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7c
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7d TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7d
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7d/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7d/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7d
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7e TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7e
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7e/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7e/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7e
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7f TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7f
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7f/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7f/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7f
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7g TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7g
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7g/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7g/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7g
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7h TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7h
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7h/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7h/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7h
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7i TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7i
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7i/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7i/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7i
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7j TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7j
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7j/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7j/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7j
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7k TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7k
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7k/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7k/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7k
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7l TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7l
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7l/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7l/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7l
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.7m TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.7m
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7m/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.7m/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.7m
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8a TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8a
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8a/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8a/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8a
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8b TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8b
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8b/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8b/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8b
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8c TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8c
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8c/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8c/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8c
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8d TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8d
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8d/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8d/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8d
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8e TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8e
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8e/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8e/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8e
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8f TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8f
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8f/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8f/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8f
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8g TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8g
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8g/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8g/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8g
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8h TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8h
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8h/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8h/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8h
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8i TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8i
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8i/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8i/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8i
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8j TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8j
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8j/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8j/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8j
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8k TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8k
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8k/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8k/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8k
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8l TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8l
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8l/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8l/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8l
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8m TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8m
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8m/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8m/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8m
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8n TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8n
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8n/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8n/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8n
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8o TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8o
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8o/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8o/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8o
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8p TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8p
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8p/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8p/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8p
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8q TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8q
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8q/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8q/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8q
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8r TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8r
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8r/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8r/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8r
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8s TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8s
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8s/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8s/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8s
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8t TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8t
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8t/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8t/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8t
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8u TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8u
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8u/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8u/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8u
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8v TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8v
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8v/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8v/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8v
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8w TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8w
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8w/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8w/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8w
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8x TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8x
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8x/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8x/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8x
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8y TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8y
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8y/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8y/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8y
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8za TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8za
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8za/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8za/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8za
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8zb TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8zb
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zb/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zb/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8zb
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8zc TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8zc
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zc/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zc/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8zc
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8zd TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8zd
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zd/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zd/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8zd
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8ze TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8ze
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8ze/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8ze/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8ze
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8zf TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8zf
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zf/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zf/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8zf
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8zg TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8zg
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zg/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zg/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8zg
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 0.9.8zh TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:0.9.8zh
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zh/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/0.9.8zh/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 0.9.8zh
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0a TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0a
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0a/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0a/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0a
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0b TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0b
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0b/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0b/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0b
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0c TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0c
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0c/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0c/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0c
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0d TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0d
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0d/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0d/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0d
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0e TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0e
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0e/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0e/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0e
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0f TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0f
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0f/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0f/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0f
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0g TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0g
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0g/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0g/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0g
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0h TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0h
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0h/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0h/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0h
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0i TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0i
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0i/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0i/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0i
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0j TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0j
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0j/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0j/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0j
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0k TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0k
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0k/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0k/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0k
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0l TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0l
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0l/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0l/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0l
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0m TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0m
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0m/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0m/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0m
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0n TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0n
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0n/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0n/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0n
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0o TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0o
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0o/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0o/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0o
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0p TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0p
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0p/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0p/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0p
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0q TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0q
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0q/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0q/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0q
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0r TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0r
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0r/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0r/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0r
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0s TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0s
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0s/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0s/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0s
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.0t TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.0t
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0t/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.0t/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.0t
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: openssl 1.0.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: openssl 1.0.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: openssl 1.0.1t TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.1t
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1t/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1t/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.1t
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: openssl 1.0.1t TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.1t
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1t/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1t/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.1t
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: openssl 1.0.1t TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/openssl:1.0.1t
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1t/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/openssl/1.0.1t/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation openssl
        --version 1.0.1t
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.11 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.11
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.11 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.11
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.11 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.11
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.12 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.12
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.12 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.12
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.12 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.12
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.13 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.13
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.13 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.13
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.13 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.13
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.14 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.14
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.14 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.14
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.14 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.14
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.15 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.15
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.15 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.15
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.15 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.15
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.16 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.16
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.16 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.16
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.16 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.16
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.17 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.17
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.17 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.17
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.17 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.17
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.18 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.18
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.18 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.18
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.18 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.18
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.2.19 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.19
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.19 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.19
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.2.19 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.19
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.4 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.4
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.4 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.4/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.4/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.4
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.4 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.4/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.4/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.4
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.5 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.5
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.5 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.5/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.5/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.5
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.5 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.5/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.5/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.5
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.6 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.6
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.6 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.6/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.6/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.6
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.6 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.6/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.6/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.6
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.7 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.7
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.7 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.7/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.7/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.7
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.7 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.7
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.8 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.8
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.8 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.8/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.8/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.8
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.8 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.8/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.8/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.8
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.9 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.9
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.9 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.9
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.9 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.9
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.10 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.10
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.10 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.10
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.10 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.10
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.11 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.11
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.11 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.11
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.11 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.11
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.12 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.12
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.12 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.12
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.12 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.12
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.13 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.13
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.13 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.13
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.13 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.13
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.14 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.14
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.14 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.14
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.14 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.14
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.15 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.15
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.15 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.15
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.15 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.15
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.16 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.16
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.16 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.16
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.16 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.16
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.17 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.17
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.17 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.17
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.17 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.17
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.18 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.18
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.18 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.18
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.18 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.18
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.19 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.19
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.19 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.19
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.19 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.19
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.20 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.20
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.20 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.20
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.20 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.20
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.21 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.21
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.21 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.21
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.21 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.21
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 1.3.22 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.22
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.22 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.22
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 1.3.22 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.22
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.0.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.0.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.0.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.0.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.0.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.0.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.0.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.0.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.0.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.2 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.2
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.2 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.2
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.3 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.3
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.3 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.3
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.3 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.3
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.4 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.4
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.4 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.4
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.4 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.4
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.5 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.5
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.5 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.5
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.5 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.5
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.6 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.6
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.6 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.6
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.6 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.6
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.7 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.7
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.7 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.7
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.7 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.7
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.8 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.8
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.8 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.8
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.8 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.8
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.9 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.9
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.9 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.9
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.9 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.9
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.10 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.10
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.10 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.10
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.10 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.10
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.11 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.11
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.11 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.11
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.11 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.11
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.12 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.12
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.12 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.12
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.12 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.12
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.13 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.13
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.13 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.13
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.13 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.13
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.14 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.14
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.14 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.14
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.14 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.14
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.15 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.15
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.15 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.15
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.15 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.15
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.16 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.16
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.16 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.16
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.16 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.16
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.17 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.17
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.17 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.17
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.17 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.17
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.1.18 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.18
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.18 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.18
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.1.18 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.18
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.2.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.2.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.2.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.2.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.2.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.2.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.3.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.3.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.3.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.3.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.3.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.3.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.3.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.3.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.3.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.4.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.4.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.4.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.4.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.4.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.4.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.4.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.4.2 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.2
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.4.2 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.2
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.5.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.5.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.5.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.5.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.5.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.5.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.6.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.6.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.6.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.6.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.6.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.6.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.2 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.2
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.2 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.2
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.3 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.3
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.3 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.3
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.3 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.3
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.4 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.4
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.4 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.4
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.4 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.4
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.5 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.5
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.5 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.5
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.5 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.5
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.6 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.6
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.6 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.6
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.6 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.6
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.7 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.7
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.7 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.7
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.7 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.7
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.8 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.8
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.8 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.8
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.8 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.8
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.9 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.9
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.9 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.9
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.9 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.9
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.7.10 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.10
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.10 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.10
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.7.10 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.10
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.8.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.8.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.8.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.8.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.8.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.8.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.8.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.8.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.8.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.9.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.9.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.9.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.9.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.9.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.9.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.9.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.9.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.9.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.10.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.10.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.10.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.10.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.10.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.10.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.10.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.10.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.10.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.11.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.11.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.11.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.11.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.11.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.11.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.11.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.11.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.11.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.12.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.12.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.12.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.12.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.12.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.12.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.12.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.12.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.12.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.13.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.13.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.13.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.13.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.13.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.13.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.14.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.14.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.14.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.14.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.14.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.14.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.15.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.15.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.15.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.15.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.15.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.15.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.16.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.16.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.16.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.16.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.16.1 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.1
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.16.1 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.1
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


---
kind: pipeline
name: mbedtls 2.17.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.17.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.17.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.17.0 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.17.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.17.0
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master

---
kind: pipeline
name: mbedtls 2.17.0 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.17.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.17.0
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

trigger:
  branch:
    - master


