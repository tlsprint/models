---
kind: pipeline
name: mbedtls 1.2.12 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.12
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.12 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.12
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.12 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.12
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.13 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.13
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.13 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.13
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.13 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.13
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.14 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.14
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.14 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.14
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.14 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.14
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.15 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.15
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.15 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.15
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.15 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.15
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.16 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.16
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.16 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.16
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.16 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.16
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.17 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.17
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.17 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.17
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.17 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.17
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.18 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.18
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.18 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.18
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.18 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.18
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.19 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.19
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.19 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.19
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.2.19 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.2.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.2.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.2.19
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.9 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.9
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.9 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.9
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.9 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.9/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.9
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.10 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.10
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.10 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.10
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.10 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.10/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.10
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.11 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.11
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.11 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.11
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.11 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.11
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.12 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.12
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.12 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.12
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.12 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.12/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.12
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.13 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.13
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.13 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.13
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.13 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.13/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.13
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.14 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.14
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.14 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.14
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.14 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.14/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.14
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.15 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.15
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.15 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.15
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.15 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.15/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.15
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.16 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.16
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.16 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.16
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.16 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.16/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.16
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.17 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.17
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.17 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.17
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.17 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.17/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.17
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.18 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.18
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.18 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.18
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.18 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.18/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.18
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.19 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.19
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.19 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.19
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.19 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.19
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.19/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.19
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.20 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.20
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.20 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.20
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.20 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.20
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.20/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.20
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.21 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.21
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.21 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.21
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.21 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.21
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.21/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.21
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.22 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.22
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.22 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.22
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 1.3.22 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:1.3.22
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/1.3.22/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 1.3.22
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.0.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.0.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.0.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.0.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.3 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.3
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.4 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.4
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.5 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.5
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.6 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.6
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.7 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.7
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.7 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.7/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.7
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.8 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.8
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.9 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.9
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.10 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.10
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.11 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.11
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.12 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.12
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.12/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.12
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.13 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.13
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.13/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.13
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.14 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.14
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.14/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.14
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.15 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.15
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.15/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.15
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.16 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.16
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.16/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.16
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.17 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.17
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.17/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.17
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.1.18 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.1.18
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.1.18/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.1.18
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.2.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.2.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.2.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.2.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.2.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.3.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.3.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.3.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.3.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.4.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.4.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.4.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.4.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.4.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.4.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.5.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.5.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.5.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.5.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.5.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.6.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.6.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.6.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.6.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.6.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.3 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.3
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.3/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.3
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.4 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.4
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.4/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.4
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.5 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.5
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.5/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.5
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.6 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.6
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.6/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.6
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.7 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.7
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.7/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.7
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.8 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.8
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.8/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.8
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.9 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.9
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.9/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.9
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.10 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.10
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.10 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.10
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.10/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.10
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.11 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.11/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.11
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.11 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.11/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.11
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.7.11 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.7.11
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.7.11/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.7.11
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.8.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.8.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.8.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.8.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.9.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.9.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.9.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.9.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.10.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.10.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.10.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.10.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.11.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.11.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.11.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.11.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.12.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.12.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.12.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.12.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.13.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.13.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.13.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.13.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.13.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.14.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.14.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.14.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.14.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.14.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.15.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.15.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.15.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.15.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.15.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.16.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.16.1 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.1
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.1/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.1
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.16.2 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.2/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.2
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.16.2 TLS11

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.2/TLS11/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.2
        --tls-version TLS11
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.16.2 TLS12

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.16.2
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.16.2/TLS12/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.16.2
        --tls-version TLS12
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

---
kind: pipeline
name: mbedtls 2.17.0 TLS10

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/mbedtls:2.17.0
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/mbedtls/2.17.0/TLS10/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation mbedtls
        --version 2.17.0
        --tls-version TLS10
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

