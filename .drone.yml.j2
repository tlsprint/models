{% for target in targets -%}
{% set implementation = target["implementation"] -%}
{% set version = target["version"] -%}
{% set protocol = target["protocol"] -%}
---
kind: pipeline
name: {{ implementation }} {{ version }} {{ protocol }}

steps:
    # Start the sut (system under test)
  - name: sut
    image: tlsprint/{{ implementation }}:{{ version }}
    detach: true

    # Start the connector with a delay of 5 seconds, so the sut has time to
    # initialize.
  - name: connector
    image: tlsprint/tlsattackerconnector
    pull: always
    detach: true
    commands:
      - connector
        --targetHost sut
        --protocolVersion {{ protocol }}
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --startupDelay 5000
        --timeout 500
        --merge-application

    # Perform the learning
  - name: learner
    image: tlsprint/statelearner
    pull: always
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/{{ implementation }}/{{ version }}/{{ protocol }}/learnedModel.dot ]; then exit 0; fi
      - sleep 10
      - statelearner
      - "cp output_server/learnedModel.dot /tmp/cache/learnedModel.dot"

  - name: commit
    image: python:3.6
    volumes:
      - name: cache
        path: /tmp/cache
    commands:
        # Skip if target already exists
      - if [ -e models/{{ implementation }}/{{ version }}/{{ protocol }}/learnedModel.dot ]; then exit 0; fi
      - pip install -r requirements.txt
      - python commit_model.py
        --implementation {{ implementation }}
        --version {{ version }}
        --tls-version {{ protocol }}
        --model /tmp/cache/learnedModel.dot
        --verbose
    environment:
      GITLAB_TLSPRINT_API_KEY:
        from_secret: GITLAB_TLSPRINT_API_KEY

volumes:
  - name: cache
    temp: {}

{% endfor %}
